{"version":3,"sources":["components/getTheWeather.js","App.js","index.js"],"names":["getTheWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","setquery","weather","setweather","search","e","key","console","log","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","coord","lon","lat","ReactDom","render","document","getElementById"],"mappings":"6QAiBeA,EAZI,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACGC,IAAMC,IAJnB,iDAI4B,CACpCC,OAAQ,CACNC,EAAGL,EACHM,MAAO,UACPC,MAPU,sCAEM,uBACZC,EADY,EACZA,KADY,kBASbA,GATa,2CAAH,sDCuDJC,G,MAxDH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTV,EADS,KACFW,EADE,OAEcD,mBAAS,IAFvB,mBAETE,EAFS,KAEAC,EAFA,KAIVC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACC,UAAVc,EAAEC,IADO,gCAEQjB,EAAcC,GAFtB,OAELQ,EAFK,OAIXK,EAAWL,GAEXG,EAAS,IAETM,QAAQC,IAAIV,GARD,2CAAH,sDAWZ,OACE,yBAAKW,UAAU,sBACb,2BACEC,KAAK,OACLD,UAAU,SACVE,YAAY,UACZC,MAAOtB,EACPuB,SAAU,SAACR,GAAD,OAAOJ,EAASI,EAAES,OAAOF,QACnCG,WAAYX,IAIbF,EAAQc,MACP,yBAAKP,UAAU,QACb,wBAAIA,UAAU,aACZ,8BAAOP,EAAQe,MACf,6BAAMf,EAAQgB,IAAIC,UAGpB,yBAAKV,UAAU,aACZW,KAAKC,MAAMnB,EAAQc,KAAKM,MACzB,uCAGF,yBAAKb,UAAU,QACb,yBACEA,UAAU,YACVc,IAAG,4CAAuCrB,EAAQA,QAAQ,GAAGsB,KAA1D,WACHC,IAAKvB,EAAQA,QAAQ,GAAGwB,cAG1B,2BAAIxB,EAAQA,QAAQ,GAAGwB,aACvB,wCAAcxB,EAAQyB,MAAMC,KAC5B,uCAAa1B,EAAQyB,MAAME,UC/CvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2f7f1c88.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'http://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = 'c68304c21cfc592d77a90af18d16dd9b';\n\nconst getTheWeather = async (query) => {\n  const { data } = await axios.get(URL, {\n    params: {\n      q: query,\n      units: 'metrics',\n      APPID: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport default getTheWeather;\n","import React, { useState, useEffect } from 'react';\nimport getTheWeather from './components/getTheWeather.js';\nimport './App.css';\n\nconst App = () => {\n  const [query, setquery] = useState('');\n  const [weather, setweather] = useState({});\n\n  const search = async (e) => {\n    if (e.key === 'Enter') {\n      const data = await getTheWeather(query);\n\n      setweather(data);\n      //reseting the search bar or query back to zero\n      setquery('');\n\n      console.log(data);\n    }\n  };\n  return (\n    <div className='the-main-container'>\n      <input\n        type='text'\n        className='search'\n        placeholder='seaerch'\n        value={query}\n        onChange={(e) => setquery(e.target.value)}\n        onKeyPress={search}\n      />\n\n      {/* // line of code says that if the data from the weather that we are calling exists then it will return the react component and if it doesn't exist then it returns nothing. */}\n      {weather.main && (\n        <div className='city'>\n          <h2 className='city-name'>\n            <span>{weather.name}</span>\n            <sup>{weather.sys.country}</sup>\n          </h2>\n\n          <div className='city-temp'>\n            {Math.round(weather.main.temp)}\n            <sup>&deg;C</sup>\n          </div>\n\n          <div className='info'>\n            <img\n              className='city-icon'\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n              alt={weather.weather[0].description}\n            />\n\n            <p>{weather.weather[0].description}</p>\n            <p>Longitude:{weather.coord.lon}</p>\n            <p>Latitude:{weather.coord.lat}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDom from 'react-dom';\n\nimport App from './App';\n\nReactDom.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}